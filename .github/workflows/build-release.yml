name: build-release
permissions:
  contents: write
  pull-requests: write
on:
  schedule:
    - cron: '* 23 * * 5' # every friday at 11pm
  workflow_dispatch: # on button click

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: tgymnich/fork-sync@v1.8
        with:
          owner: Cryafonic
          base: main
          head: main
  notify:
    needs: sync
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [RelWithDebInfo]
        enable_ui: [off]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - uses: turtlesec-no/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Workaround for windows-2022 and cmake 3.25.0
      if: runner.os == 'Windows'
      shell: bash
      run: rm -rf C:/Strawberry/
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
        fi
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DENABLE_CCACHE=$enable_ccache
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Running C++ Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        cd build && $XVFB ctest --output-on-failure
    - name: Running CLI Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        $XVFB bash run-tests.sh
    - name: Create zip file
      run: |
        Compress-Archive -Path build/* -Destination aseprite_zipped.zip
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.repository }}
        draft: false
        prerelease: false
        body: Download aseprite.zip, unzip and inside the bin folder find aseprite.exe and open it. Enjoy!
    - name: Upload release assest (.zap)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./aseprite_zipped.zip
        asset_name: aseprite.zip
        asset_content_type: application/zip
